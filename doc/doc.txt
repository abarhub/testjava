
* Overload / Override : org.testjava.testoverloadoverride.TestOverride.test
-Override concerne la redéfinition d'une methode d'une classe ancetre. Elle peut avoir l'annotation
@Override, mais c'est pas obligatoire. Les paramètres doivent être les mêmes.
-Overload ajoute une autre définition d'une methode avec d'autres paramètres.
-Quand il y a une redéfinition (override), le type de retour peut être un sous type.
-Quand il y a une redéfinition (override), les types des paramètres ne peuvent pas changer.

* package :
-une methode protected est accéssible dans les sous classe et dans le package de la classe


* try with resource :
-try with resource peut être utiliser sur un closable ou un autoclosable
-s'il y a plusieurs variables, la fermeture se fait dans le même ordre que l'ouverture,
c-a-d s'il y a :
try(Res tmp1=new Res(),tmp2=new Res()){ }
La variable tmp1 sera fermée avant tmp2. C'est bizard, mais c'est comme cela. (cf org.testjava.testexercices.TestRes.test)

* classes imbriqués :
-une interface inclu dans une autre classe est obligatoirement static, et ce mot clef n'est pas obligatoire.


* fonctional :
-une classe avec l'annotation @FunctionalInterface ne doit avoir qu'une seule methode non définit,
et cette methode ne doit pas être une de la classe Object.

